// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id         String         @id @default(uuid())
  title      String
  slug       String         @unique
  content    String
  extract    String
  authorId   String
  author     User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories PostCategory[]
  tags       PostTag[]
  media      Media[]
  analytics  Analytics?
  published  Boolean        @default(false)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model Category {
  id          String         @id @default(uuid())
  name        String         @unique
  slug        String         @unique
  description String?
  posts       PostCategory[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model PostCategory {
  postId     String
  categoryId String
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId]) // Composite key to prevent duplicates
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  slug      String    @unique
  posts     PostTag[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model PostTag {
  postId String
  tagId  String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId]) // Composite key
}

model Media {
  id        String    @id @default(uuid())
  url       String
  type      MediaType
  postId    String?
  post      Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())

  @@index([postId])
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

model Analytics {
  id        String   @id @default(uuid())
  postId    String   @unique
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  views     Int      @default(0)
  likes     Int      @default(0)
  shares    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Newsletter {
  id             String           @id @default(uuid())
  email          String           @unique
  verified       Boolean          @default(false)
  createdAt      DateTime         @default(now())
  SentNewsletter SentNewsletter[]
}

model SentNewsletter {
  id           String     @id @default(uuid())
  newsletterId String
  newsletter   Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade)
  subject      String
  content      String
  sentAt       DateTime   @default(now())
}
